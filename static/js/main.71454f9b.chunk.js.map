{"version":3,"sources":["pictures/Aubrey_Bachant_Resume.pdf","pictures/ripta-dashboard.png","pictures/osmnx_nyc_crop.png","pictures/rhyme_ratio_violin_thumbnail.png","pictures/ripta-animation.gif","pictures/osmnx_nyc.png","pictures/osmnx_nyc_closeup.png","pictures/osmnx_williamsburg.png","pictures/rhyme_ratio_scatter.png","pictures/rhyme_ratio_violin.png","pictures/rhyme_ratio_mean.png","pictures/rhyme_ratio_full.png","pictures/rhyme_type.png","pictures/instrumental.png","components/layout/navbar.js","components/about.js","components/resume.js","components/projectThumbnail.js","components/projects.js","components/layout/footer.js","components/projectContent.jsx","components/projectDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","src","alt","About","id","Resume","href","require","download","ProjectThumbnail","this","props","imageSrc","thumbnail","title","description","React","Component","Projects","state","projectThumbnails","url","imageAlt","reverse","map","object","createThumbnails","Footer","Date","getFullYear","content","thumbnailSrc","thumbnailAlt","html","ProjectDetail","match","project","find","params","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71454f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Aubrey_Bachant_Resume.1948e8c0.pdf\";","module.exports = __webpack_public_path__ + \"static/media/ripta-dashboard.e012080a.png\";","module.exports = __webpack_public_path__ + \"static/media/osmnx_nyc_crop.9d354dac.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_ratio_violin_thumbnail.58a2095c.png\";","module.exports = __webpack_public_path__ + \"static/media/ripta-animation.02bae494.gif\";","module.exports = __webpack_public_path__ + \"static/media/osmnx_nyc.a7ae3ae9.png\";","module.exports = __webpack_public_path__ + \"static/media/osmnx_nyc_closeup.67777766.png\";","module.exports = __webpack_public_path__ + \"static/media/osmnx_williamsburg.b5189c3a.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_ratio_scatter.6bb91319.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_ratio_violin.392cbe4a.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_ratio_mean.a0aec0ff.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_ratio_full.95e86c4c.png\";","module.exports = __webpack_public_path__ + \"static/media/rhyme_type.0c08c21d.png\";","module.exports = __webpack_public_path__ + \"static/media/instrumental.7eaefe39.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar() {\n  return(\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <div className=\"container-fluid\">\n        <div className=\"navbar-header\">\n          <Link to=\"/\">\n            <div className=\"navbar-brand\">\n              <img src=\"favicon.ico\" alt=\"favicon\"></img>\n            </div>\n          </Link>\n        </div>\n        <ul className=\"nav\">\n          <Link to=\"/resume\">\n            <li className=\"nav-item nav-link\">Resume</li>\n          </Link>\n          <Link to=\"/projects\">\n            <li className=\"nav-item nav-link\">Projects</li>\n          </Link>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from 'react';\n\n\nfunction About() {\n  return(\n    <div id=\"about-background\" className=\"container-fluid\">\n      <div className=\"jumbotron\">\n        <h1>AUBREY LYNN BACHANT</h1>\n        <p>\n          I am a programmer and web developer passionate about working with and analyzing\n          data to find solutions for civic and social problems. I am particularly interested in applying those skills to help better understand\n          and improve transit, urban planning, and language.\n        </p>\n      </div>\n   </div>\n  )\n}\n\nexport default About\n","import React from 'react';\n\n\nfunction Resume() {\n  return(\n    <div className=\"page-content\" id=\"resume\">\n        <div>\n            <h1>AUBREY LYNN BACHANT</h1>\n            <h4><a href=\"mailto:aubreybachant@gmail.com\">aubreybachant@gmail.com</a> | 774-400-8759 | <a href=\"https://www.linkedin.com/in/aubrey-bachant-36bb77115/\">LinkedIn</a> | <a href=\"https://github.com/abachant\">GitHub</a></h4>\n            <h4>Boston, Massachusetts <small>(willing to relocate)</small></h4>\n        </div>\n        <hr />\n        <div>\n            <h3>Skills</h3>\n            <ul>\n                <li>Python</li>\n                <ul>\n                    <li>Pandas</li>\n                    <li>Jupyter Notebook</li>\n                    <li>Matplotlib</li>\n                    <li>Plotly</li>\n                </ul>\n                <li>JavaScript</li>\n                <ul>\n                    <li>React</li>\n                    <li>jQuery</li>\n                    <li>Jest</li>\n                </ul>\n                <li>Firebase</li>\n                <li>SQL</li>\n                <li>Git/GitHub</li>\n                <li>Bash</li>\n                <li>HTML</li>\n                <li>CSS</li>\n                <ul>\n                    <li>Bootstrap</li>\n                    <li>SASS</li>\n                    <li>BEM</li>\n                </ul>\n                <li>Tulip App Builder</li>\n                <li>Windows Office(Word, Excel, Powerpoint)</li>\n                <li>SketchUp CAD Software</li>\n                <li>French(intermediate)</li>\n                <li>Reception</li>\n                <li>Construction/Carpentry/Metalworking</li>\n            </ul>\n            <h3>Projects</h3>\n            <div className=\"resume-subsection\">\n                <h4>In Progress</h4>\n                <h5><a href=\"https://github.com/abachant/Lane-Claim\">Lane Claim</a></h5>\n                    <ul>\n                        <li>Lane Claim is a progressive web app designed for tracking and reporting bikelane hazards, primarily cars</li>\n                        <li>It is built in React, styled with SCSS and Bootstrap, and uses Jest for unit testing</li>\n                        <li>It uses Firebase <a href=\"https://firebase.google.com/products/realtime-database/\">Realtime Database</a> and <a href=\"https://firebase.google.com/products/storage/\">Storage</a> for its data</li>\n                    </ul>\n                <h4>Complete</h4>\n                <p>See <a href=\"projects\">Projects page</a></p>\n            </div>\n            <h3>Experience</h3>\n            <div className=\"resume-subsection\">\n                <h4><a href=\"https://www.dentsplysirona.com/en-us\">Dentsply Sirona</a>, Waltham, MA</h4>\n                <h5>Production Technician II: (October 2018—Current)</h5>\n                    <ul>\n                        <li>Used LEAN principles to verify, manufacture, and ship dental implants</li>\n                        <li>Designed and created 5S auditing application on own volition</li>\n                        <li>Tulip App Administrator</li>\n                    </ul>\n                <h4><a href=\"https://dashride.com\">Dashride</a>, New York, NY</h4>\n                <h5>Front End Developer Intern: (June 2018—August 2018 )</h5>\n                    <ul>\n                        <li>Worked on redesign of ride booking tool in jQuery</li>\n                        <li>Worked together with a team of other developers</li>\n                        <li>Used RESTful APIs and Unit Testing</li>\n                    </ul>\n                <h4><a href=\"http://billbachantbuilders.com/\">Bachant Builders</a>, Wareham, MA</h4>\n                <h5>Foreman/Carpenter: (April 2009—November 2013 / November 2016—January 2018)</h5>\n                    <ul>\n                        <li>Used SketchUp to design blueprints for mapping building dimensions</li>\n                        <li>Had experience doing finish carpentry and installing cabinets</li>\n                        <li>Duties included carpentry/woodworking, automotive repair, masonry, metalworking</li>\n                    </ul>\n                <h4><a href=\"https://www.facebook.com/Animal-Associates-1455735024727937/\">Animal Associates</a>, Dartmouth, MA</h4>\n                <h5>Office Manager/Head Receptionist: (July 2015—November 2016)</h5>\n                    <ul>\n                        <li>In charge of billing, operating the front office, and opening and closing the business each day</li>\n                        <li>Promoted from Head Receptionist to Office Manager in 5 months</li>\n                        <li>Volunteered at “Hearts 4 Paws” animal shelter once a week</li>\n                    </ul>\n                <h4><a href=\"https://bachantsgunshop.com/\">Bachant Gun Shop</a>, Lakeville, MA</h4>\n                <h5>Gunsmith: (October 2014—July 2015)</h5>\n                    <ul>\n                        <li>Designed parts for fabrication using SketchUp CAD software</li>\n                        <li>Cleaned, fixed, and listed firearms for sale on various online platforms</li>\n                        <li>Found creative solutions to mechanical problems without clear instructions</li>\n                    </ul>\n            </div>\n            <h3>Education</h3>\n            <div className=\"resume-subsection\">\n                <h4>Bristol Community College, Fall River, MA (2015—)</h4>\n                <ul>\n                    <li>General Studies</li>\n                </ul>\n                <h4>Apponequet Regional High School, Lakeville, MA (2009—2013)</h4>\n                <ul>\n                    <li>Advance Placement and Honors courses</li>\n                </ul>\n            </div>\n        </div>\n        <hr />\n        <div>\n            <a href=\"https://docs.google.com/document/d/1L6P6jkl4q3_AXfLKtrq0fPq4rQqa8FdX_cPikwOKdus/edit?usp=sharing\">View Resume on Google Docs</a>\n            <br />\n            <a href={require(\"../pictures/Aubrey_Bachant_Resume.pdf\")} download>Download Resume as PDF</a>\n        </div>\n    </div>\n  )\n}\n\nexport default Resume\n","import React from 'react';\n\nclass ProjectThumbnail extends React.Component {\n    render() {\n        return(\n            <div className=\"img-thumbnail\">\n                <div className=\"thumbnail-image-container\">\n                    <img src={this.props.imageSrc} alt={this.props.thumbnail} className=\"thumbnail-image\"/>\n                </div>\n                <div className=\"thumbnail-info-container\">\n                    <h3>{this.props.title}</h3>\n                    <p>{this.props.description}</p>\n                </div>\n            </div>\n        );      \n    }\n}\n\nexport default ProjectThumbnail\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ProjectThumbnail from './projectThumbnail.js';\n\n\nclass Projects extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projectThumbnails: [\n        {\n          title: \"This Site\",\n          id: \"1\",\n          url: \"abachant-github-pages\",\n          description: \"A custom website built from scratch\",\n          imageSrc: \"android-chrome-512x512.png\",\n          imageAlt: \"thumbnail\",\n        },\n        {\n          title: \"RIPTA Dashboard\",\n          id: \"2\",\n          url: \"RIPTA-dashboard\",\n          description: \"Realtime dashboard using RIPTA's API\",\n          imageSrc: require(\"../pictures/ripta-dashboard.png\"),\n          imageAlt: \"thumbnail\",\n        },\n        {\n          title: \"OSMnx Grid Analysis\",\n          id: \"3\",\n          url: \"osmnx-grids\",\n          description: \"Using OSMnx to analyze the grids of New York City\",\n          imageSrc: require(\"../pictures/osmnx_nyc_crop.png\"),\n          imageAlt: \"thumbnail\",\n        },\n        {\n          title: \"Rhyme Scheme Analysis\",\n          id: \"4\",\n          url: \"rhyme-scheme\",\n          description: \"A Jupyter Notebook for analyzing stylistic habits of songwriters\",\n          imageSrc: require(\"../pictures/rhyme_ratio_violin_thumbnail.png\"),\n          imageAlt: \"thumbnail\",\n        }\n      ]\n    };\n  };\n\n  // Create a <ProjectThumbnail /> for each object in the state\n  createThumbnails() {\n    return this.state.projectThumbnails.reverse().map(object => <Link to={`/projects/${object.url}`} className=\"col-lg-4 col-md-6 thumbnail\"><ProjectThumbnail title={object.title} description={object.description} imageSrc={object.imageSrc} imageAlt={object.imageAlt}/></Link>)\n  }\n\n  render(){\n    return(\n      <div className=\"container-fluid thumbnail-container page-content\">\n        {this.createThumbnails()}\n      </div>\n    );\n  }\n}\n\nexport default Projects\n","import React from 'react';\n\nfunction getDate() {\n  const date = new Date();\n  return date.getFullYear();\n}\n\nfunction Footer() {\n  return(\n  <footer className=\"global-footer\">©{getDate()} Aubrey Bachant</footer>\n  )\n}\n\nexport default Footer\n","import React from 'react';\n\nconst content = [\n    {\n        title: \"This Site\",\n        id: \"1\",\n        url: \"abachant-github-pages\",\n        description: \"\",\n        thumbnailSrc: \"\",\n        thumbnailAlt: \"\",\n        html:\n        <div>\n            <div>\n                <h1>Github-Pages Portfolio</h1>\n                <h5>February 2018</h5>\n                <p>This site was built from scratch in React. It is hosted though GitHub's lovely <a href=\"https://pages.github.com/\">Pages.</a></p>\n                <p>\n                    After I changed my GitHub profile name the GitHub Pages portfolio hosted under my previous name no longer worked. So I decided \n                    to utilize my new React skills to completely rebuild my new portfolio from the ground up. The previous site was written in basic html css and jQuery.\n                    Most of the content stayed the same and was able to be transferred from the old site easily, but I was able to greatly improve the structure and add new functionality with React. \n                    Instead of just using raw html files I got the chance to implement my new knowledge of React-Router to dynamically create multiple pages. \n                    This was a lot of fun since I had only used React before for single page applications. I also got the chance to reorganize and improve \n                    the styling methodologies by implementing BEM. \n                </p>\n            </div>\n            <hr></hr>\n            <div>\n                <p><a href=\"https://github.com/abachant/Gbachant.github.io\" className=\"footer\">View previous project on Github</a></p>\n                <p><a href=\"https://github.com/abachant/abachant.github.io\" className=\"footer\">View project on GitHub</a></p>\n            </div>\n        </div>\n    },\n    {\n        title: \"RIPTA Dashboard\",\n        id: \"2\",\n        url: \"RIPTA-dashboard\",\n        description: \"\",\n        thumbnailSrc: \"\",\n        thumbnailAlt: \"\",\n        html:\n        <div>\n            <div>\n                <h1>RIPTA Dashboard</h1>\n                <h5>January 2018</h5>\n                <img id=\"ripta-background\" src={require(\"../pictures/ripta-animation.gif\")} alt=\"real-time RIPTA display animation\" className=\"img-responsive\"></img>\n                <p>\n                    RIPTA-Dashboard is a Python dashboard for viewing real-time data from its\n                    RIPTA's API. The data is first taken in and organized into a pandas\n                    dataframe then the current location of each bus is mapped along with\n                    information about its speed, id, and bus route using Ploty's framework <a href=\"https://plot.ly/products/dash/\">Dash</a>.\n                </p>\n                <h4>Project Data</h4>\n                <p>\n                    All the data for the project came from <a href=\"http://realtime.ripta.com:81/\">RIPTA's own API.</a>\n                    The API provides us with a JSON file of a whole range of the statuses of\n                    its buses and bus stops at the time it was read.\n                </p>\n                <h4>Future Goals</h4>\n                <p>\n                    One of the most important goals for RIPTA-Dashboard is to eventually be\n                    able to get smoother updates of the onscreen data. I was successful at\n                    first by adding the property <code>Animation=True</code> to the\n                    <code>dcc.Graph</code> and was able to have smooth updates that only\n                    changed the position of data plots without entirely reloading the whole\n                    page and other unnecessary elements. Unfortunately, the <code>Animate</code>\n                    property is still in beta and ended up breaking our ability to maintain\n                    camera position and zoom and as result would always go back to its default\n                    position after each API callback. For the time being I was forced to sacrifice\n                    smooth transitions for the ability to maintain camera position and figure\n                    since it is more important to have a constant state of reference when comparing\n                    the movements of objects.\n                </p>\n                <p>\n                    There is also a lot more data in the API than just location, speed, vehicle id,\n                    and which route a bus is currently on. I eventually want use the data they\n                    give about the buses' delay to have a real-time punctuality display for each\n                    bus. I would also like to keep a running average of delay for each bus\n                    route and individual bus stop in order to help identify which have the\n                    best and worst punctuality and to match that with other data to potentially identify why.\n                </p>\n            </div>\n            <hr></hr>\n            <div>\n                <p><a href=\"https://github.com/abachant/RIPTA-dashboard\" className=\"footer\">View project on GitHub</a></p>\n            </div>\n        </div>\n    },\n    {\n        title: \"OSMnx Grid Analysis\",\n        id: \"3\",\n        url: \"osmnx-grids\",\n        description: \"\",\n        thumbnailSrc: \"\",\n        thumbnailAlt: \"\",\n        html:\n        <div>\n            <div>\n                <h1>Analyzing Grids with OSMnx</h1>\n                <h5>February 2018</h5>\n                <p>\n                    This is project I have been interested in doing for quite some time now.\n                    It was inspired by looking at the beautiful and chaotic mixing together\n                    of grids in New York City, <a href=\"https://www.google.com/maps/place/Brooklyn,+NY/@40.6496725,-73.9659865,12.5z/data=!4m5!3m4!1s0x89c24416947c2109:0x82765c7404007886!8m2!3d40.6781784!4d-73.9441579\">Brooklyn</a> in particular. I became interested in finding a way to organize and\n                    analyze the relationships of the various grids based on angles of their\n                    bearings. It wasn't until I found <a href=\"https://github.com/gboeing/osmnx\">OSMnx</a>,\n                    a Python package for working with and analyzing OpenStreetMap files made\n                    by <a href=\"http://geoffboeing.com/\">Geoff Boeing</a>, that I was able to\n                    find the right tool to do so.\n                </p>\n                <p>\n                    OSMnx comes with many useful functions for analyzing maps by default.\n                    One such function is the ability to retrieve the bearings\n                    of a network's streets and <a href=\"https://github.com/gboeing/osmnx-examples/blob/master/notebooks/15-calculate-visualize-edge-bearings.ipynb\">graph their frequency</a>,\n                    but this wasn't enough.\n                </p>\n                <p>\n                    Anyone familiar with working with OpenStreetMap files will know that they\n                    aren't exactly perfect representations. This is due to the very nature of\n                    how they are created. OSM files are composed of nodes and ways. Most of\n                    these nodes and ways were placed by humans physically overlaying them onto\n                    satellite imagery and can be prone to human error. As a result, nodes and ways that\n                    should theoretically be perfectly aligned and ordered are not.</p>\n                <p>\n                    To overcome this I accessed the <code>bearing</code> attribute inside\n                    the networkx multidigraph and created another attribute,<code>rounded_bearing</code>,\n                    composed of <code>bearing</code> rounded to an integer. This allows us to\n                    filter the graph by edge bearings much easier and even chose to only\n                    graph the bearings that we desire.\n                </p>\n                <p>I also added another attribute <code>modulo_bearing</code> which is just\n                    the <code>rounded_bearing</code>modulo 90. By using modulo 90 I was able\n                    to get all edges placed into 90 groups composed of edges who share either\n                    parallel or perpendicular edge bearings. From there I was able use an\n                    osmnx function, <code>osmnx.get_edge_colors_by_attr()</code>, to assign a\n                    different color to each of the 90 groups of edges and eventually plot them.\n                </p>\n                <h5>Downtown Manhattan and Brooklyn</h5>\n                    <figure>\n                        <img src={require(\"../pictures/osmnx_nyc.png\")} alt=\"osmnx-grids of New York City by compass bearing\"></img>\n                        <figcaption className=\"col-lg-5\">\n                        Each group of perpendicular bearings is\n                        represented by a different color. The grouping\n                        of grids becomes immediately apparent. What is\n                        most interesting are groups of grids that aren't\n                        connected; though they are physically seperated\n                        they still follow the same bearings. For\n                        instance note the two purple bearing groups: one\n                        at the Brooklyn side of the Brooklyn and\n                        Manhattan bridges and the other to the far east\n                        of Prospect Park in the bottom right corner of\n                        the image.\n                        </figcaption>\n                    </figure>\n                </div>\n                <div>\n                    <h5>Closeup of downtown Manhattan and Brooklyn</h5>\n                    <figure>\n                        <img src={require(\"../pictures/osmnx_nyc_closeup.png\")} alt=\"closeup of osmnx-grids of New York City\"></img>\n                        <figcaption className=\"col-lg-5\">\n                        Note how the purple bearings on the Brooklyn\n                        end of the Manhattan and Brooklyn bridges merge\n                        with and become part of the grids of the dark\n                        orange bearings just south of the Brooklyn Navy\n                        Yard. One of the main things I was interested in\n                        doing with this project was analyzing the\n                        'borders' of groups of grids and how their edges\n                        met and bonded together.\n                        </figcaption>\n                    </figure>\n                </div>\n                <div>\n                    <h5>Williamsburg, Brooklyn</h5>\n                    <figure>\n                        <img src={require(\"../pictures/osmnx_williamsburg.png\")} alt=\"osmnx-grids of Williamsburg, Brooklyn\"></img>\n                        <figcaption className=\"col-lg-5\" >\n                        A close up of Williamsburg, a neighborhood of\n                        Brooklyn with a particularly interesting street\n                        pattern. Note the rainbow pattern on the curved\n                        sections of the Williamsburg Bridge and\n                        Interstate 278 as it changes as its segments\n                        change bearings.\n                        </figcaption>\n                    </figure>\n                </div>\n            <hr></hr>\n            <div>\n                <a href=\"https://github.com/abachant/osmnx-grid\" className=\"footer\">View project on GitHub</a><br/>\n                <a href=\"https://github.com/abachant/osmnx-examples/blob/add-bearing-analysis-example/notebooks/17-edge-bearing-analysis.ipynb\">View Python Jupyter Notebook example on GitHub</a><br/>\n                <a href=\"https://github.com/gboeing/osmnx/pull/135/files\">View contribution to OSMnx sourcecode on GitHub</a>\n            </div>\n        </div>\n    },\n    {\n        title: \"Rhyme Scheme Analysis\",\n        id: \"4\",\n        url: \"rhyme-scheme\",\n        description: \"\",\n        thumbnailSrc: \"\",\n        thumbnailAlt: \"\",\n        html:\n        <div>\n            <div>\n                <h1>Analyzing the Rhyming Habits of Songwriters</h1>\n                <h5>April 2018</h5>\n                <p>\n                    This project was inspired by the peculiar songwriting habits of\n                    Ray Davies. Although the\n                    majority of pop songs tend to generally follow the traditional rhyme scheme of\n                    ABAB CDCD etc., I couldn't help but notice that Ray Davies had a habit\n                    of choosing lyrics that almost deliberately didn't rhyme. I began to\n                    wonder if there was a way to quantifiy and analyze this phenomena and\n                    even find other insights into artist's lyrical habits, so I created a\n                    jupyter notebook to test that thought.\n                </p>\n                <h4>Getting the Data</h4>\n                <p>\n                    The lyrics for an artist's discography was obtained by using the python\n                    library <a href=\"https://github.com/jameswenzel/pylyrics3\">pylyrics3</a>,\n                    which returns a nested dictionary of the artist's songs by album. From\n                    there I got the rhyme type (couplet, limerick, rondeau etc.) for for each song using the library <a href=\"https://github.com/hyperreality/Poetry-Tools\">Poetry-tools</a>.\n                    Most importantly for this project I created the function <code>get_rhyme_ratio()</code> to get the rhyme ratio for each song\n                    and then organized all of the relevant data into a <a href=\"https://pandas.pydata.org/\">Pandas</a> Dataframe.\n                </p>\n                <h4>Rhyme Ratio</h4>\n                    <p>\n                    From my own experience writing songs and poetry and the observations of\n                    other writers I've noticed that it can actually be easier to write lines that rhyme.\n                    It can also be all too easy to stay within the safe ABAB CDCD rhyme scheme.\n                    That's why the unique songwriting of Ray Davies of The Kinks caught the attention of mine.\n                    His songs had a frequent subversion of convential pop rhyming or so it did seem.\n                    </p>\n                    <p>Rhyme ratio was a variable I came up with to try to quantitatively measure how frequently one utilizes rhymes in their writing.\n                    It is essentially the total number of unique ending phonemes divided by\n                    the total number of lines of a song. A song with a rhyme scheme of ABAB CDCD EFEF\n                    would have a <code>rhyme_ratio</code> of 0.5 while a rhyme scheme of ABCC DEFF GHIJ would have a <code>rhyme_ratio</code> of 0.75.\n                    This was the metric I used to try and determine how prosodically creative a song was.\n                    </p>\n                <h4>Graphing the Results</h4>\n                    <p>After all the data was sent to the Pandas Dataframe, I then used a combination of <a href=\"https://matplotlib.org/index.html\">Matplotlib</a> and <a href=\"https://seaborn.pydata.org/\">Seaborn</a> to plot the results.\n                    </p>\n                    <h5>Rhyme Ratio by Album over Time</h5>\n                    <img src={require(\"../pictures/rhyme_ratio_scatter.png\")} alt=\"Scatter plot of rhyme ratio over time for The Kinks\"></img>\n                    <img src={require(\"../pictures/rhyme_ratio_violin.png\")} alt=\"Violin plot of rhyme ratio over time for The Kinks\"></img>\n                    <img src={require(\"../pictures/rhyme_ratio_mean.png\")} alt=\"Line plot of mean rhyme ratio over time for The Kinks\"></img>\n                    <img src={require(\"../pictures/rhyme_ratio_full.png\" )}alt=\"Individual and mean plot of rhyme ratio over time for The Kinks\"></img>\n                    <h5>Rhyme Type by Album over Time</h5>\n                    <img src={require(\"../pictures/rhyme_type.png\")} alt=\"Bar chart of rhyme type over time for The Kinks\"></img>\n                    <h5>Instrumental vs Lyrical Song by album over Time</h5>\n                    <img src={require(\"../pictures/instrumental.png\")} alt=\"Bar chart of instrumentality by album over time for The Kinks\"></img>\n                <h4>Conclusion</h4>\n                    <p>Looking at the line graph for mean rhyme ratio over time I did validate my personal opinion that the 'Golden Era' Kinks (albums between 'Something Else (1967)' and 'Preservation Act 2 (1974)') were more creative than the rest of their work.\n                    Upon looking at the mean rhyme ratio matched over the individual rhyme ratio violin plot I quickly realized however that the difference in mean rhyme ratios was negligible.\n                    </p>\n                    <p>Are there any real conclusions to be drawn from the data? Not really but it was very fun building and interesting to look at the way we can try to measure subject things like creativity with objective metrics.\n                    If you want to see the whole Jupyter Notebook and play around with it with your favorite artists\n                    the link is <a href=\"https://github.com/abachant/rhyme-scheme/blob/master/rhyme-scheme.ipynb\">here</a>.</p>\n            </div>\n            <hr></hr>\n            <div>\n            <p><a href=\"https://github.com/abachant/rhyme-scheme/blob/master/rhyme-scheme.ipynb\" className=\"footer\">View project on GitHub</a></p>\n            </div>\n        </div>\n    }\n\n]\nexport default content","import React from 'react';\nimport content from './projectContent.jsx';\n\nfunction ProjectDetail ({match}) {\n    \n    // Get respective project content from projectContent.jsx by matching project url with Link url\n    const project = content.find(object => {\n        return object.url === match.params.url;\n    })\n    return <div className=\"page-content\">{project.html}</div>\n\n}\n\nexport default ProjectDetail","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Navbar from './components/layout/navbar.js';\nimport About from './components/about.js';\nimport Resume from './components/resume.js';\nimport Projects from './components/projects.js';\nimport Footer from './components/layout/footer.js';\nimport ProjectDetail from './components/projectDetail.js';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"App app-content\">\n          <Switch>\n            <Route path=\"/\" exact component={About} />\n            <Route path=\"/resume\" component={Resume} />\n            <Route path=\"/projects\" exact component={Projects} />\n            <Route path=\"/projects/:url\" component={ProjectDetail}/>\n          </Switch>\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}